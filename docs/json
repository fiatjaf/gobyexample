<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example: JSON</title>
    <link rel=stylesheet href="site.css">
  </head>
  <body>
    <div class="example" id="json">
      <h2><a href="./">Go by Example</a>: JSON</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Go offers built-in support for JSON encoding and
decoding, including to and from built-in and custom
data types.</p>

          </td>
          <td class="code empty leading">
	        
            
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="n">package</span><span class="w"> </span><span class="n">main</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="n">import</span><span class="w"> </span><span class="s">&quot;encoding/json&quot;</span><span class="w"></span>
<span class="n">import</span><span class="w"> </span><span class="s">&quot;fmt&quot;</span><span class="w"></span>
<span class="n">import</span><span class="w"> </span><span class="s">&quot;os&quot;</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>We&rsquo;ll use these two structs to demonstrate encoding and
decoding of custom types below.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="k">type</span><span class="w"> </span><span class="n">response1</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">Page</span><span class="w">   </span><span class="n">int</span><span class="w"></span>
<span class="w">    </span><span class="n">Fruits</span><span class="w"> </span><span class="p">[]</span><span class="n">string</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
<span class="k">type</span><span class="w"> </span><span class="n">response2</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">Page</span><span class="w">   </span><span class="n">int</span><span class="w">      </span><span class="err">`</span><span class="n">json</span><span class="o">:</span><span class="s">&quot;page&quot;</span><span class="err">`</span><span class="w"></span>
<span class="w">    </span><span class="n">Fruits</span><span class="w"> </span><span class="p">[]</span><span class="n">string</span><span class="w"> </span><span class="err">`</span><span class="n">json</span><span class="o">:</span><span class="s">&quot;fruits&quot;</span><span class="err">`</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="n">func</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>First we&rsquo;ll look at encoding basic data types to
JSON strings. Here are some examples for atomic
values.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">bolB</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">json</span><span class="p">.</span><span class="n">Marshal</span><span class="p">(</span><span class="k">true</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">string</span><span class="p">(</span><span class="n">bolB</span><span class="p">))</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">intB</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">json</span><span class="p">.</span><span class="n">Marshal</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">string</span><span class="p">(</span><span class="n">intB</span><span class="p">))</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">fltB</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">json</span><span class="p">.</span><span class="n">Marshal</span><span class="p">(</span><span class="mf">2.34</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">string</span><span class="p">(</span><span class="n">fltB</span><span class="p">))</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">strB</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">json</span><span class="p">.</span><span class="n">Marshal</span><span class="p">(</span><span class="s">&quot;gopher&quot;</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">string</span><span class="p">(</span><span class="n">strB</span><span class="p">))</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>And here are some for slices and maps, which encode
to JSON arrays and objects as you&rsquo;d expect.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">slcD</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="p">[]</span><span class="n">string</span><span class="p">{</span><span class="s">&quot;apple&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;peach&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;pear&quot;</span><span class="p">}</span><span class="w"></span>
<span class="w">    </span><span class="n">slcB</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">json</span><span class="p">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">slcD</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">string</span><span class="p">(</span><span class="n">slcB</span><span class="p">))</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">mapD</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">map</span><span class="p">[</span><span class="n">string</span><span class="p">]</span><span class="n">int</span><span class="p">{</span><span class="s">&quot;apple&quot;</span><span class="o">:</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;lettuce&quot;</span><span class="o">:</span><span class="w"> </span><span class="mi">7</span><span class="p">}</span><span class="w"></span>
<span class="w">    </span><span class="n">mapB</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">json</span><span class="p">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">mapD</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">string</span><span class="p">(</span><span class="n">mapB</span><span class="p">))</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>The JSON package can automatically encode your
custom data types. It will only include exported
fields in the encoded output and will by default
use those names as the JSON keys.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">res1D</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">response1</span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">Page</span><span class="o">:</span><span class="w">   </span><span class="mi">1</span><span class="p">,</span><span class="w"></span>
<span class="w">        </span><span class="n">Fruits</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="n">string</span><span class="p">{</span><span class="s">&quot;apple&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;peach&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;pear&quot;</span><span class="p">}}</span><span class="w"></span>
<span class="w">    </span><span class="n">res1B</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">json</span><span class="p">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">res1D</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">string</span><span class="p">(</span><span class="n">res1B</span><span class="p">))</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>You can use tags on struct field declarations
to customize the encoded JSON key names. Check the
definition of <code>response2</code> above to see an example
of such tags.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">res2D</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">response2</span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">Page</span><span class="o">:</span><span class="w">   </span><span class="mi">1</span><span class="p">,</span><span class="w"></span>
<span class="w">        </span><span class="n">Fruits</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="n">string</span><span class="p">{</span><span class="s">&quot;apple&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;peach&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;pear&quot;</span><span class="p">}}</span><span class="w"></span>
<span class="w">    </span><span class="n">res2B</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">json</span><span class="p">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">res2D</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">string</span><span class="p">(</span><span class="n">res2B</span><span class="p">))</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Now let&rsquo;s look at decoding JSON data into Go
values. Here&rsquo;s an example for a generic data
structure.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">byt</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="p">[]</span><span class="n">byte</span><span class="p">(</span><span class="err">`</span><span class="p">{</span><span class="s">&quot;num&quot;</span><span class="o">:</span><span class="mf">6.13</span><span class="p">,</span><span class="s">&quot;strs&quot;</span><span class="o">:</span><span class="p">[</span><span class="s">&quot;a&quot;</span><span class="p">,</span><span class="s">&quot;b&quot;</span><span class="p">]}</span><span class="err">`</span><span class="p">)</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>We need to provide a variable where the JSON
package can put the decoded data. This
<code>map[string]interface{}</code> will hold a map of strings
to arbitrary data types.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">dat</span><span class="w"> </span><span class="n">map</span><span class="p">[</span><span class="n">string</span><span class="p">]</span><span class="n">interface</span><span class="p">{}</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Here&rsquo;s the actual decoding, and a check for
associated errors.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="n">err</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">json</span><span class="p">.</span><span class="n">Unmarshal</span><span class="p">(</span><span class="n">byt</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">dat</span><span class="p">);</span><span class="w"> </span><span class="n">err</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">nil</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">dat</span><span class="p">)</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>In order to use the values in the decoded map,
we&rsquo;ll need to cast them to their appropriate type.
For example here we cast the value in <code>num</code> to
the expected <code>float64</code> type.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">num</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">dat</span><span class="p">[</span><span class="s">&quot;num&quot;</span><span class="p">].(</span><span class="n">float64</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">num</span><span class="p">)</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Accessing nested data requires a series of
casts.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">strs</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">dat</span><span class="p">[</span><span class="s">&quot;strs&quot;</span><span class="p">].([]</span><span class="n">interface</span><span class="p">{})</span><span class="w"></span>
<span class="w">    </span><span class="n">str1</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">strs</span><span class="p">[</span><span class="mi">0</span><span class="p">].(</span><span class="n">string</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">str1</span><span class="p">)</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>We can also decode JSON into custom data types.
This has the advantages of adding additional
type-safety to our programs and eliminating the
need for type assertions when accessing the decoded
data.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="kt">str</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="err">`</span><span class="p">{</span><span class="s">&quot;page&quot;</span><span class="o">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;fruits&quot;</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="s">&quot;apple&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;peach&quot;</span><span class="p">]}</span><span class="err">`</span><span class="w"></span>
<span class="w">    </span><span class="n">res</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">response2</span><span class="p">{}</span><span class="w"></span>
<span class="w">    </span><span class="n">json</span><span class="p">.</span><span class="n">Unmarshal</span><span class="p">([]</span><span class="n">byte</span><span class="p">(</span><span class="kt">str</span><span class="p">),</span><span class="w"> </span><span class="o">&amp;</span><span class="n">res</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">res</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">Fruits</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>In the examples above we always used bytes and
strings as intermediates between the data and
JSON representation on standard out. We can also
stream JSON encodings directly to <code>os.Writer</code>s like
<code>os.Stdout</code> or even HTTP response bodies.</p>

          </td>
          <td class="code">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">enc</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">json</span><span class="p">.</span><span class="n">NewEncoder</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">Stdout</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">d</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">map</span><span class="p">[</span><span class="n">string</span><span class="p">]</span><span class="n">int</span><span class="p">{</span><span class="s">&quot;apple&quot;</span><span class="o">:</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;lettuce&quot;</span><span class="o">:</span><span class="w"> </span><span class="mi">7</span><span class="p">}</span><span class="w"></span>
<span class="w">    </span><span class="n">enc</span><span class="p">.</span><span class="n">Encode</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="gp">$</span> go run json.go
<span class="go">true</span>
<span class="go">1</span>
<span class="go">2.34</span>
<span class="go">&quot;gopher&quot;</span>
<span class="go">[&quot;apple&quot;,&quot;peach&quot;,&quot;pear&quot;]</span>
<span class="go">{&quot;apple&quot;:5,&quot;lettuce&quot;:7}</span>
<span class="go">{&quot;Page&quot;:1,&quot;Fruits&quot;:[&quot;apple&quot;,&quot;peach&quot;,&quot;pear&quot;]}</span>
<span class="go">{&quot;page&quot;:1,&quot;fruits&quot;:[&quot;apple&quot;,&quot;peach&quot;,&quot;pear&quot;]}</span>
<span class="go">map[num:6.13 strs:[a b]]</span>
<span class="go">6.13</span>
<span class="go">a</span>
<span class="go">{1 [apple peach]}</span>
<span class="go">apple</span>
<span class="go">{&quot;apple&quot;:5,&quot;lettuce&quot;:7}</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>We&rsquo;ve covered the basic of JSON in Go here, but check
out the <a href="http://blog.golang.org/2011/01/json-and-go.html">JSON and Go</a>
blog post and <a href="http://golang.org/pkg/encoding/json/">JSON package docs</a>
for more.</p>

          </td>
          <td class="code empty">
	        
            
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="time">Time</a>.
      </p>
      
      <p class="footer">
        by <a href="https://fiatjaf.alhur.es/">fiatjaf</a> | <a href="https://github.com/fiatjaf/rustbyexample/blob/master/examples/json">source</a> | <a href="https://github.com/fiatjaf/rustbyexample#license">license</a>
      </p>
    </div>
  </body>
</html>
