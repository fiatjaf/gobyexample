<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Rust by Example: Match</title>
    <link rel=stylesheet href="site.css">
  </head>
  <body>
    <div class="example" id="match">
      <pre id="rustcode" hidden>// _Switch statements_ express conditionals across many
// branches.

package main

import "fmt"
import "time"

func main() {

    // Here's a basic `switch`.
    i := 2
    fmt.Print("Write ", i, " as ")
    switch i {
    case 1:
        fmt.Println("one")
    case 2:
        fmt.Println("two")
    case 3:
        fmt.Println("three")
    }

    // You can use commas to separate multiple expressions
    // in the same `case` statement. We use the optional
    // `default` case in this example as well.
    switch time.Now().Weekday() {
    case time.Saturday, time.Sunday:
        fmt.Println("It's the weekend")
    default:
        fmt.Println("It's a weekday")
    }

    // `switch` without an expression is an alternate way
    // to express if/else logic. Here we also show how the
    // `case` expressions can be non-constants.
    t := time.Now()
    switch {
    case t.Hour() < 12:
        fmt.Println("It's before noon")
    default:
        fmt.Println("It's after noon")
    }

    // A type `switch` compares types instead of values.  You
    // can use this to discover the type of an interface
    // value.  In this example, the variable `t` will have the
    // type corresponding to its clause.
    whatAmI := func(i interface{}) {
        switch t := i.(type) {
        case bool:
            fmt.Println("I'm a bool")
        case int:
            fmt.Println("I'm an int")
        default:
            fmt.Printf("Don't know type %T\n", t)
        }
    }
    whatAmI(true)
    whatAmI(1)
    whatAmI("hey")
}
</pre>
      <h2><a href="./">Rust by Example</a>: Match</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p><em>Switch statements</em> express conditionals across many
branches.</p>

          </td>
          <td class="code empty leading">
	        
            
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="n">package</span><span class="w"> </span><span class="n">main</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="n">import</span><span class="w"> </span><span class="s">&quot;fmt&quot;</span><span class="w"></span>
<span class="n">import</span><span class="w"> </span><span class="s">&quot;time&quot;</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="n">func</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Here&rsquo;s a basic <code>switch</code>.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">i</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="mi">2</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Print</span><span class="p">(</span><span class="s">&quot;Write &quot;</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="s">&quot; as &quot;</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">switch</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">case</span><span class="w"> </span><span class="mi">1</span><span class="o">:</span><span class="w"></span>
<span class="w">        </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;one&quot;</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">case</span><span class="w"> </span><span class="mi">2</span><span class="o">:</span><span class="w"></span>
<span class="w">        </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;two&quot;</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">case</span><span class="w"> </span><span class="mi">3</span><span class="o">:</span><span class="w"></span>
<span class="w">        </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;three&quot;</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>You can use commas to separate multiple expressions
in the same <code>case</code> statement. We use the optional
<code>default</code> case in this example as well.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">switch</span><span class="w"> </span><span class="n">time</span><span class="p">.</span><span class="n">Now</span><span class="p">().</span><span class="n">Weekday</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">case</span><span class="w"> </span><span class="n">time</span><span class="p">.</span><span class="n">Saturday</span><span class="p">,</span><span class="w"> </span><span class="n">time</span><span class="p">.</span><span class="n">Sunday</span><span class="o">:</span><span class="w"></span>
<span class="w">        </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;It&#39;s the weekend&quot;</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">default</span><span class="o">:</span><span class="w"></span>
<span class="w">        </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;It&#39;s a weekday&quot;</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>switch</code> without an expression is an alternate way
to express if/else logic. Here we also show how the
<code>case</code> expressions can be non-constants.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">t</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">time</span><span class="p">.</span><span class="n">Now</span><span class="p">()</span><span class="w"></span>
<span class="w">    </span><span class="n">switch</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">case</span><span class="w"> </span><span class="n">t</span><span class="p">.</span><span class="n">Hour</span><span class="p">()</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">12</span><span class="o">:</span><span class="w"></span>
<span class="w">        </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;It&#39;s before noon&quot;</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">default</span><span class="o">:</span><span class="w"></span>
<span class="w">        </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;It&#39;s after noon&quot;</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>A type <code>switch</code> compares types instead of values.  You
can use this to discover the type of an interface
value.  In this example, the variable <code>t</code> will have the
type corresponding to its clause.</p>

          </td>
          <td class="code">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">whatAmI</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">func</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="n">interface</span><span class="p">{})</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">switch</span><span class="w"> </span><span class="n">t</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">i</span><span class="p">.(</span><span class="k">type</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">case</span><span class="w"> </span><span class="kt">bool</span><span class="o">:</span><span class="w"></span>
<span class="w">            </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;I&#39;m a bool&quot;</span><span class="p">)</span><span class="w"></span>
<span class="w">        </span><span class="n">case</span><span class="w"> </span><span class="n">int</span><span class="o">:</span><span class="w"></span>
<span class="w">            </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;I&#39;m an int&quot;</span><span class="p">)</span><span class="w"></span>
<span class="w">        </span><span class="n">default</span><span class="o">:</span><span class="w"></span>
<span class="w">            </span><span class="n">fmt</span><span class="p">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">&quot;Don&#39;t know type %T</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">t</span><span class="p">)</span><span class="w"></span>
<span class="w">        </span><span class="p">}</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="w">    </span><span class="n">whatAmI</span><span class="p">(</span><span class="k">true</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">whatAmI</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">whatAmI</span><span class="p">(</span><span class="s">&quot;hey&quot;</span><span class="p">)</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
	        
            <div class="highlight"><pre><span class="gp">$</span> go run switch.go 
<span class="go">Write 2 as two</span>
<span class="go">It&#39;s a weekday</span>
<span class="go">It&#39;s after noon</span>
<span class="go">I&#39;m a bool</span>
<span class="go">I&#39;m an int</span>
<span class="go">Don&#39;t know type string</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="arrays">Arrays</a>.
      </p>
      
      <p class="footer">
        by <a href="https://fiatjaf.alhur.es/">fiatjaf</a> | <a href="https://github.com/fiatjaf/rustbyexample/blob/master/examples/match">source</a> | <a href="https://github.com/fiatjaf/rustbyexample#license">license</a>
      </p>
    </div>
  </body>
</html>
