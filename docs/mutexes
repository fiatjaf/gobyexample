<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example: Mutexes</title>
    <link rel=stylesheet href="site.css">
  </head>
  <body>
    <div class="example" id="mutexes">
      <h2><a href="./">Go by Example</a>: Mutexes</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>In the previous example we saw how to manage simple
counter state using <a href="atomic-counters">atomic operations</a>.
For more complex state we can use a <em><a href="http://en.wikipedia.org/wiki/Mutual_exclusion">mutex</a></em>
to safely access data across multiple goroutines.</p>

          </td>
          <td class="code empty leading">
	        
            
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="n">package</span><span class="w"> </span><span class="n">main</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="n">import</span><span class="w"> </span><span class="p">(</span><span class="w"></span>
<span class="w">    </span><span class="s">&quot;fmt&quot;</span><span class="w"></span>
<span class="w">    </span><span class="s">&quot;math/rand&quot;</span><span class="w"></span>
<span class="w">    </span><span class="s">&quot;sync&quot;</span><span class="w"></span>
<span class="w">    </span><span class="s">&quot;sync/atomic&quot;</span><span class="w"></span>
<span class="w">    </span><span class="s">&quot;time&quot;</span><span class="w"></span>
<span class="p">)</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="n">func</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>For our example the <code>state</code> will be a map.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">make</span><span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="n">int</span><span class="p">]</span><span class="n">int</span><span class="p">)</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>This <code>mutex</code> will synchronize access to <code>state</code>.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">mutex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">sync</span><span class="p">.</span><span class="n">Mutex</span><span class="p">{}</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>We&rsquo;ll keep track of how many read and write
operations we do.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">readOps</span><span class="w"> </span><span class="n">uint64</span><span class="w"></span>
<span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">writeOps</span><span class="w"> </span><span class="n">uint64</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Here we start 100 goroutines to execute repeated
reads against the state, once per millisecond in
each goroutine.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">r</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">r</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">100</span><span class="p">;</span><span class="w"> </span><span class="n">r</span><span class="o">++</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">go</span><span class="w"> </span><span class="n">func</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">            </span><span class="n">total</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
<span class="w">            </span><span class="k">for</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>For each read we pick a key to access,
<code>Lock()</code> the <code>mutex</code> to ensure
exclusive access to the <code>state</code>, read
the value at the chosen key,
<code>Unlock()</code> the mutex, and increment
the <code>readOps</code> count.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">                </span><span class="n">key</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">rand</span><span class="p">.</span><span class="n">Intn</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="w"></span>
<span class="w">                </span><span class="n">mutex</span><span class="p">.</span><span class="n">Lock</span><span class="p">()</span><span class="w"></span>
<span class="w">                </span><span class="n">total</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">state</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="w"></span>
<span class="w">                </span><span class="n">mutex</span><span class="p">.</span><span class="n">Unlock</span><span class="p">()</span><span class="w"></span>
<span class="w">                </span><span class="n">atomic</span><span class="p">.</span><span class="n">AddUint64</span><span class="p">(</span><span class="o">&amp;</span><span class="n">readOps</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Wait a bit between reads.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">                </span><span class="n">time</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">Millisecond</span><span class="p">)</span><span class="w"></span>
<span class="w">            </span><span class="p">}</span><span class="w"></span>
<span class="w">        </span><span class="p">}()</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>We&rsquo;ll also start 10 goroutines to simulate writes,
using the same pattern we did for reads.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">w</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">w</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">10</span><span class="p">;</span><span class="w"> </span><span class="n">w</span><span class="o">++</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">go</span><span class="w"> </span><span class="n">func</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">            </span><span class="k">for</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">                </span><span class="n">key</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">rand</span><span class="p">.</span><span class="n">Intn</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="w"></span>
<span class="w">                </span><span class="n">val</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">rand</span><span class="p">.</span><span class="n">Intn</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span><span class="w"></span>
<span class="w">                </span><span class="n">mutex</span><span class="p">.</span><span class="n">Lock</span><span class="p">()</span><span class="w"></span>
<span class="w">                </span><span class="n">state</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">val</span><span class="w"></span>
<span class="w">                </span><span class="n">mutex</span><span class="p">.</span><span class="n">Unlock</span><span class="p">()</span><span class="w"></span>
<span class="w">                </span><span class="n">atomic</span><span class="p">.</span><span class="n">AddUint64</span><span class="p">(</span><span class="o">&amp;</span><span class="n">writeOps</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"></span>
<span class="w">                </span><span class="n">time</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">Millisecond</span><span class="p">)</span><span class="w"></span>
<span class="w">            </span><span class="p">}</span><span class="w"></span>
<span class="w">        </span><span class="p">}()</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Let the 10 goroutines work on the <code>state</code> and
<code>mutex</code> for a second.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">time</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">Second</span><span class="p">)</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Take and report final operation counts.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">readOpsFinal</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">atomic</span><span class="p">.</span><span class="n">LoadUint64</span><span class="p">(</span><span class="o">&amp;</span><span class="n">readOps</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;readOps:&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">readOpsFinal</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">writeOpsFinal</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">atomic</span><span class="p">.</span><span class="n">LoadUint64</span><span class="p">(</span><span class="o">&amp;</span><span class="n">writeOps</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;writeOps:&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">writeOpsFinal</span><span class="p">)</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>With a final lock of <code>state</code>, show how it ended up.</p>

          </td>
          <td class="code">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">mutex</span><span class="p">.</span><span class="n">Lock</span><span class="p">()</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;state:&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">state</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">mutex</span><span class="p">.</span><span class="n">Unlock</span><span class="p">()</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Running the program shows that we executed about
90,000 total operations against our <code>mutex</code>-synchronized
<code>state</code>.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="gp">$</span> go run mutexes.go
<span class="go">readOps: 83285</span>
<span class="go">writeOps: 8320</span>
<span class="go">state: map[1:97 4:53 0:33 2:15 3:2]</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Next we&rsquo;ll look at implementing this same state
management task using only goroutines and channels.</p>

          </td>
          <td class="code empty">
	        
            
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="stateful-goroutines">Stateful Goroutines</a>.
      </p>
      
      <p class="footer">
        by <a href="https://fiatjaf.alhur.es/">fiatjaf</a> | <a href="https://github.com/fiatjaf/rustbyexample/blob/master/examples/mutexes">source</a> | <a href="https://github.com/fiatjaf/rustbyexample#license">license</a>
      </p>
    </div>
  </body>
</html>
