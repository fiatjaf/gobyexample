<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example: Interfaces</title>
    <link rel=stylesheet href="site.css">
  </head>
  <body>
    <div class="example" id="interfaces">
      <h2><a href="./">Go by Example</a>: Interfaces</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p><em>Interfaces</em> are named collections of method
signatures.</p>

          </td>
          <td class="code empty leading">
	        
            
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="n">package</span><span class="w"> </span><span class="n">main</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="n">import</span><span class="w"> </span><span class="s">&quot;fmt&quot;</span><span class="w"></span>
<span class="n">import</span><span class="w"> </span><span class="s">&quot;math&quot;</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Here&rsquo;s a basic interface for geometric shapes.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="k">type</span><span class="w"> </span><span class="n">geometry</span><span class="w"> </span><span class="n">interface</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">area</span><span class="p">()</span><span class="w"> </span><span class="n">float64</span><span class="w"></span>
<span class="w">    </span><span class="n">perim</span><span class="p">()</span><span class="w"> </span><span class="n">float64</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>For our example we&rsquo;ll implement this interface on
<code>rect</code> and <code>circle</code> types.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="k">type</span><span class="w"> </span><span class="n">rect</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">width</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="w"> </span><span class="n">float64</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
<span class="k">type</span><span class="w"> </span><span class="n">circle</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">radius</span><span class="w"> </span><span class="n">float64</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>To implement an interface in Go, we just need to
implement all the methods in the interface. Here we
implement <code>geometry</code> on <code>rect</code>s.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="n">func</span><span class="w"> </span><span class="p">(</span><span class="n">r</span><span class="w"> </span><span class="n">rect</span><span class="p">)</span><span class="w"> </span><span class="n">area</span><span class="p">()</span><span class="w"> </span><span class="n">float64</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">r</span><span class="p">.</span><span class="n">width</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">r</span><span class="p">.</span><span class="n">height</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
<span class="n">func</span><span class="w"> </span><span class="p">(</span><span class="n">r</span><span class="w"> </span><span class="n">rect</span><span class="p">)</span><span class="w"> </span><span class="n">perim</span><span class="p">()</span><span class="w"> </span><span class="n">float64</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">2</span><span class="o">*</span><span class="n">r</span><span class="p">.</span><span class="n">width</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">2</span><span class="o">*</span><span class="n">r</span><span class="p">.</span><span class="n">height</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>The implementation for <code>circle</code>s.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="n">func</span><span class="w"> </span><span class="p">(</span><span class="n">c</span><span class="w"> </span><span class="n">circle</span><span class="p">)</span><span class="w"> </span><span class="n">area</span><span class="p">()</span><span class="w"> </span><span class="n">float64</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">math</span><span class="p">.</span><span class="n">Pi</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">c</span><span class="p">.</span><span class="n">radius</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">c</span><span class="p">.</span><span class="n">radius</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
<span class="n">func</span><span class="w"> </span><span class="p">(</span><span class="n">c</span><span class="w"> </span><span class="n">circle</span><span class="p">)</span><span class="w"> </span><span class="n">perim</span><span class="p">()</span><span class="w"> </span><span class="n">float64</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">math</span><span class="p">.</span><span class="n">Pi</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">c</span><span class="p">.</span><span class="n">radius</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>If a variable has an interface type, then we can call
methods that are in the named interface. Here&rsquo;s a
generic <code>measure</code> function taking advantage of this
to work on any <code>geometry</code>.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="n">func</span><span class="w"> </span><span class="n">measure</span><span class="p">(</span><span class="n">g</span><span class="w"> </span><span class="n">geometry</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">g</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">g</span><span class="p">.</span><span class="n">area</span><span class="p">())</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">g</span><span class="p">.</span><span class="n">perim</span><span class="p">())</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="n">func</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">r</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">rect</span><span class="p">{</span><span class="n">width</span><span class="o">:</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">:</span><span class="w"> </span><span class="mi">4</span><span class="p">}</span><span class="w"></span>
<span class="w">    </span><span class="n">c</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">circle</span><span class="p">{</span><span class="n">radius</span><span class="o">:</span><span class="w"> </span><span class="mi">5</span><span class="p">}</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>The <code>circle</code> and <code>rect</code> struct types both
implement the <code>geometry</code> interface so we can use
instances of
these structs as arguments to <code>measure</code>.</p>

          </td>
          <td class="code">
	        
            <div class="highlight"><pre><span class="w">    </span><span class="n">measure</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="n">measure</span><span class="p">(</span><span class="n">c</span><span class="p">)</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="gp">$</span> go run interfaces.go
<span class="go">{3 4}</span>
<span class="go">12</span>
<span class="go">14</span>
<span class="go">{5}</span>
<span class="go">78.53981633974483</span>
<span class="go">31.41592653589793</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>To learn more about Go&rsquo;s interfaces, check out this
<a href="http://jordanorelli.tumblr.com/post/32665860244/how-to-use-interfaces-in-go">great blog post</a>.</p>

          </td>
          <td class="code empty">
	        
            
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="errors">Errors</a>.
      </p>
      
      <p class="footer">
        by <a href="https://fiatjaf.alhur.es/">fiatjaf</a> | <a href="https://github.com/fiatjaf/rustbyexample/blob/master/examples/interfaces">source</a> | <a href="https://github.com/fiatjaf/rustbyexample#license">license</a>
      </p>
    </div>
  </body>
</html>
