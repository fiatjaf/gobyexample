<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Rust by Example: Sorting by Functions</title>
    <link rel=stylesheet href="site.css">
  </head>
  <body>
    <div class="example" id="sorting-by-functions">
      <pre id="rustcode" hidden>// Sometimes we'll want to sort a collection by something
// other than its natural order. For example, suppose we
// wanted to sort strings by their length instead of
// alphabetically. Here's an example of custom sorts
// in Go.

package main

import "sort"
import "fmt"

// In order to sort by a custom function in Go, we need a
// corresponding type. Here we've created a `byLength`
// type that is just an alias for the builtin `[]string`
// type.
type byLength []string

// We implement `sort.Interface` - `Len`, `Less`, and
// `Swap` - on our type so we can use the `sort` package's
// generic `Sort` function. `Len` and `Swap`
// will usually be similar across types and `Less` will
// hold the actual custom sorting logic. In our case we
// want to sort in order of increasing string length, so
// we use `len(s[i])` and `len(s[j])` here.
func (s byLength) Len() int {
    return len(s)
}
func (s byLength) Swap(i, j int) {
    s[i], s[j] = s[j], s[i]
}
func (s byLength) Less(i, j int) bool {
    return len(s[i]) < len(s[j])
}

// With all of this in place, we can now implement our
// custom sort by casting the original `fruits` slice to
// `byLength`, and then use `sort.Sort` on that typed
// slice.
func main() {
    fruits := []string{"peach", "banana", "kiwi"}
    sort.Sort(byLength(fruits))
    fmt.Println(fruits)
}
</pre>
      <h2><a href="./">Rust by Example</a>: Sorting by Functions</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Sometimes we&rsquo;ll want to sort a collection by something
other than its natural order. For example, suppose we
wanted to sort strings by their length instead of
alphabetically. Here&rsquo;s an example of custom sorts
in Go.</p>

          </td>
          <td class="code empty leading">
	        
            
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="n">package</span><span class="w"> </span><span class="n">main</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="n">import</span><span class="w"> </span><span class="s">&quot;sort&quot;</span><span class="w"></span>
<span class="n">import</span><span class="w"> </span><span class="s">&quot;fmt&quot;</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>In order to sort by a custom function in Go, we need a
corresponding type. Here we&rsquo;ve created a <code>byLength</code>
type that is just an alias for the builtin <code>[]string</code>
type.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="k">type</span><span class="w"> </span><span class="n">byLength</span><span class="w"> </span><span class="p">[]</span><span class="n">string</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>We implement <code>sort.Interface</code> - <code>Len</code>, <code>Less</code>, and
<code>Swap</code> - on our type so we can use the <code>sort</code> package&rsquo;s
generic <code>Sort</code> function. <code>Len</code> and <code>Swap</code>
will usually be similar across types and <code>Less</code> will
hold the actual custom sorting logic. In our case we
want to sort in order of increasing string length, so
we use <code>len(s[i])</code> and <code>len(s[j])</code> here.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="n">func</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="w"> </span><span class="n">byLength</span><span class="p">)</span><span class="w"> </span><span class="n">Len</span><span class="p">()</span><span class="w"> </span><span class="n">int</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
<span class="n">func</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="w"> </span><span class="n">byLength</span><span class="p">)</span><span class="w"> </span><span class="n">Swap</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="n">int</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="w"> </span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
<span class="n">func</span><span class="w"> </span><span class="p">(</span><span class="n">s</span><span class="w"> </span><span class="n">byLength</span><span class="p">)</span><span class="w"> </span><span class="n">Less</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="n">int</span><span class="p">)</span><span class="w"> </span><span class="kt">bool</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">len</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">len</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">])</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>With all of this in place, we can now implement our
custom sort by casting the original <code>fruits</code> slice to
<code>byLength</code>, and then use <code>sort.Sort</code> on that typed
slice.</p>

          </td>
          <td class="code">
	        
            <div class="highlight"><pre><span class="n">func</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">fruits</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="p">[]</span><span class="n">string</span><span class="p">{</span><span class="s">&quot;peach&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;banana&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;kiwi&quot;</span><span class="p">}</span><span class="w"></span>
<span class="w">    </span><span class="n">sort</span><span class="p">.</span><span class="n">Sort</span><span class="p">(</span><span class="n">byLength</span><span class="p">(</span><span class="n">fruits</span><span class="p">))</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">fruits</span><span class="p">)</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Running our program shows a list sorted by string
length, as desired.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="gp">$</span> go run sorting-by-functions.go 
<span class="go">[kiwi peach banana]</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>By following this same pattern of creating a custom
type, implementing the three <code>Interface</code> methods on that
type, and then calling sort.Sort on a collection of that
custom type, we can sort Go slices by arbitrary
functions.</p>

          </td>
          <td class="code empty">
	        
            
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="panic">Panic</a>.
      </p>
      
      <p class="footer">
        by <a href="https://fiatjaf.alhur.es/">fiatjaf</a> | <a href="https://github.com/fiatjaf/rustbyexample/blob/master/examples/sorting-by-functions">source</a> | <a href="https://github.com/fiatjaf/rustbyexample#license">license</a>
      </p>
    </div>
  </body>
</html>
